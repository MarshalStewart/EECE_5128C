
Belko.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000dcc  00000e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800176  00800176  00000ed6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aad  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000749  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c9  00000000  00000000  000021c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  0000298c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000553  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000045f  00000000  00000000  00003097  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000034f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 39 03 	jmp	0x672	; 0x672 <__vector_11>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_21>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_24>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	95 00       	.word	0x0095	; ????
  6a:	9e 00       	.word	0x009e	; ????
  6c:	aa 00       	.word	0x00aa	; ????
  6e:	b6 00       	.word	0x00b6	; ????
  70:	c2 00       	.word	0x00c2	; ????
  72:	ce 00       	.word	0x00ce	; ????
  74:	e9 00       	.word	0x00e9	; ????
  76:	04 01       	movw	r0, r8
  78:	0d 01       	movw	r0, r26
  7a:	19 01       	movw	r2, r18
  7c:	25 01       	movw	r4, r10
  7e:	31 01       	movw	r6, r2
  80:	3f 01       	movw	r6, r30
  82:	5a 01       	movw	r10, r20
  84:	75 01       	movw	r14, r10
  86:	52 02       	muls	r21, r18
  88:	52 02       	muls	r21, r18
  8a:	7b 01       	movw	r14, r22
  8c:	88 01       	movw	r16, r16
  8e:	94 01       	movw	r18, r8
  90:	a0 01       	movw	r20, r0
  92:	ac 01       	movw	r20, r24
  94:	bc 01       	movw	r22, r24
  96:	c8 01       	movw	r24, r16
  98:	d4 01       	movw	r26, r8
  9a:	e0 01       	movw	r28, r0
  9c:	f0 01       	movw	r30, r0
  9e:	fc 01       	movw	r30, r24
  a0:	08 02       	muls	r16, r24
  a2:	14 02       	muls	r17, r20
  a4:	24 02       	muls	r18, r20
  a6:	30 02       	muls	r19, r16
  a8:	3c 02       	muls	r19, r28
  aa:	48 02       	muls	r20, r24

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d8 e0       	ldi	r29, 0x08	; 8
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ec ec       	ldi	r30, 0xCC	; 204
  c0:	fd e0       	ldi	r31, 0x0D	; 13
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 37       	cpi	r26, 0x76	; 118
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e7       	ldi	r26, 0x76	; 118
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a2 38       	cpi	r26, 0x82	; 130
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 9d 02 	call	0x53a	; 0x53a <main>
  e2:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <_Z9DummyLoopj>:
/************************************************************************/

void DummyLoop(uint16_t count)
{
	//Each index1 loop takes approx 100us
	for ( uint16_t index1=0; index1<=count; index1=index1+1 ) {
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	84 17       	cp	r24, r20
  f0:	95 07       	cpc	r25, r21
  f2:	58 f0       	brcs	.+22     	; 0x10a <_Z9DummyLoopj+0x20>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
		//Each index2 loop takes .5us (200 loops = 100us)
		for ( uint16_t index2=0; index2<=200; index2=index2+1 ){
  f8:	29 3c       	cpi	r18, 0xC9	; 201
  fa:	31 05       	cpc	r19, r1
  fc:	18 f4       	brcc	.+6      	; 0x104 <_Z9DummyLoopj+0x1a>
  fe:	2f 5f       	subi	r18, 0xFF	; 255
 100:	3f 4f       	sbci	r19, 0xFF	; 255
 102:	fa cf       	rjmp	.-12     	; 0xf8 <_Z9DummyLoopj+0xe>
/************************************************************************/

void DummyLoop(uint16_t count)
{
	//Each index1 loop takes approx 100us
	for ( uint16_t index1=0; index1<=count; index1=index1+1 ) {
 104:	4f 5f       	subi	r20, 0xFF	; 255
 106:	5f 4f       	sbci	r21, 0xFF	; 255
 108:	f2 cf       	rjmp	.-28     	; 0xee <_Z9DummyLoopj+0x4>
 10a:	08 95       	ret

0000010c <_Z21UpdateTWIDisplayStatev>:
		}
	}
}

void UpdateTWIDisplayState()
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
	switch(display_state) {
 110:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <display_state>
 114:	8e 2f       	mov	r24, r30
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	82 32       	cpi	r24, 0x22	; 34
 11a:	91 05       	cpc	r25, r1
 11c:	08 f0       	brcs	.+2      	; 0x120 <_Z21UpdateTWIDisplayStatev+0x14>
 11e:	c2 c1       	rjmp	.+900    	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 120:	fc 01       	movw	r30, r24
 122:	ec 5c       	subi	r30, 0xCC	; 204
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__tablejump2__>
		case 0: //Start of a new display update
		TWCR = TWCR_START;  //send start condition
 12a:	85 ea       	ldi	r24, 0xA5	; 165
 12c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 130:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 13a:	b6 c1       	rjmp	.+876    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 1: //Send address
		TWDR = 0x78; //Set TWI slave address
 13c:	88 e7       	ldi	r24, 0x78	; 120
 13e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Send address
 142:	85 e8       	ldi	r24, 0x85	; 133
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 148:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 152:	aa c1       	rjmp	.+852    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 2: //Send Control Byte (Instruction: 0x80)
		TWDR = 0x80; //Instruction 0x80
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 15a:	85 e8       	ldi	r24, 0x85	; 133
 15c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 160:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 164:	8f 5f       	subi	r24, 0xFF	; 255
 166:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 16a:	9e c1       	rjmp	.+828    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 3: //Send Instruction Byte (Set DDRAM Address: 0x80)
		TWDR = 0x80; //Set DDRAM Address: 0x80
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 172:	85 e8       	ldi	r24, 0x85	; 133
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 178:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 17c:	8f 5f       	subi	r24, 0xFF	; 255
 17e:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 182:	92 c1       	rjmp	.+804    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 4: //Send Control Byte (DDRAM Data: 0x40)
		TWDR = 0x40; //DDRAM Data: 0x40
 184:	80 e4       	ldi	r24, 0x40	; 64
 186:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 18a:	85 e8       	ldi	r24, 0x85	; 133
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 190:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 194:	8f 5f       	subi	r24, 0xFF	; 255
 196:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 19a:	86 c1       	rjmp	.+780    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 5: //Send First Line Character
		TWDR = FirstLineStr[TWI_char_index];
 19c:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <TWI_char_index>
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	e1 5c       	subi	r30, 0xC1	; 193
 1a4:	fe 4f       	sbci	r31, 0xFE	; 254
 1a6:	80 81       	ld	r24, Z
 1a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		if(TWI_char_index<19) //If not last character
 1ac:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TWI_char_index>
 1b0:	83 31       	cpi	r24, 0x13	; 19
 1b2:	20 f4       	brcc	.+8      	; 0x1bc <_Z21UpdateTWIDisplayStatev+0xb0>
		{
			TWI_char_index++; //Increment index
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <TWI_char_index>
 1ba:	07 c0       	rjmp	.+14     	; 0x1ca <_Z21UpdateTWIDisplayStatev+0xbe>
		}
		else //If last character
		{
			TWI_char_index = 0; //Reset index for next line
 1bc:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TWI_char_index>
			display_state++; //Move to next line state
 1c0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 1c4:	8f 5f       	subi	r24, 0xFF	; 255
 1c6:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		}
		TWCR = TWCR_SEND; //Set TWINT to send data
 1ca:	85 e8       	ldi	r24, 0x85	; 133
 1cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1d0:	6b c1       	rjmp	.+726    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 6: //Send Third Line Character
		TWDR = ThirdLineStr[TWI_char_index];
 1d2:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <TWI_char_index>
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	eb 5e       	subi	r30, 0xEB	; 235
 1da:	fe 4f       	sbci	r31, 0xFE	; 254
 1dc:	80 81       	ld	r24, Z
 1de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		if(TWI_char_index<19) //If not last character
 1e2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TWI_char_index>
 1e6:	83 31       	cpi	r24, 0x13	; 19
 1e8:	20 f4       	brcc	.+8      	; 0x1f2 <_Z21UpdateTWIDisplayStatev+0xe6>
		{
			TWI_char_index++; //Increment index
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <TWI_char_index>
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <_Z21UpdateTWIDisplayStatev+0xf4>
		}
		else //If last character
		{
			TWI_char_index = 0; //Reset index for next line
 1f2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TWI_char_index>
			display_state++; //Send stop signal
 1f6:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		}
		TWCR = TWCR_SEND; //Set TWINT to send data
 200:	85 e8       	ldi	r24, 0x85	; 133
 202:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 206:	50 c1       	rjmp	.+672    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 7: //Send repeated start to reset display
		TWCR = TWCR_RSTART;
 208:	85 ea       	ldi	r24, 0xA5	; 165
 20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 20e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 218:	47 c1       	rjmp	.+654    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 8: //Send address
		TWDR = 0x78; //Set TWI slave address
 21a:	88 e7       	ldi	r24, 0x78	; 120
 21c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Send address
 220:	85 e8       	ldi	r24, 0x85	; 133
 222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 226:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 22a:	8f 5f       	subi	r24, 0xFF	; 255
 22c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 230:	3b c1       	rjmp	.+630    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 9: //Send Control Byte (Instruction: 0x80)
		TWDR = 0x80; //Instruction 0x80
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 238:	85 e8       	ldi	r24, 0x85	; 133
 23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 23e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 248:	2f c1       	rjmp	.+606    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 10: //Send Instruction Byte (Set DDRAM Address: 0x80)
		TWDR = 0xC0; //Set DDRAM Address: 0xC0
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 250:	85 e8       	ldi	r24, 0x85	; 133
 252:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 256:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 260:	23 c1       	rjmp	.+582    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 11: //Send Control byte for DDRAM data
		TWDR = 0x40;
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 268:	85 e8       	ldi	r24, 0x85	; 133
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		TWI_char_index =0;
 26e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TWI_char_index>
		display_state++;
 272:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 276:	8f 5f       	subi	r24, 0xFF	; 255
 278:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 27c:	15 c1       	rjmp	.+554    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 12: //Send Second Line Characters
		TWDR = SecondLineStr[TWI_char_index];
 27e:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <TWI_char_index>
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	e6 5d       	subi	r30, 0xD6	; 214
 286:	fe 4f       	sbci	r31, 0xFE	; 254
 288:	80 81       	ld	r24, Z
 28a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		if(TWI_char_index<19) //If not last character
 28e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TWI_char_index>
 292:	83 31       	cpi	r24, 0x13	; 19
 294:	20 f4       	brcc	.+8      	; 0x29e <_Z21UpdateTWIDisplayStatev+0x192>
		{
			TWI_char_index++; //Increment index
 296:	8f 5f       	subi	r24, 0xFF	; 255
 298:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <TWI_char_index>
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <_Z21UpdateTWIDisplayStatev+0x1a0>
		}
		else //If last character
		{
			TWI_char_index = 0; //Reset index for next line
 29e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TWI_char_index>
			display_state++; //Send stop signal
 2a2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		}
		TWCR = TWCR_SEND; //Set TWINT to send data
 2ac:	85 e8       	ldi	r24, 0x85	; 133
 2ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 2b2:	fa c0       	rjmp	.+500    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 13: //Send Fourth Line Characters
		TWDR = FourthLineStr[TWI_char_index];
 2b4:	e0 91 80 01 	lds	r30, 0x0180	; 0x800180 <TWI_char_index>
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	e0 50       	subi	r30, 0x00	; 0
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		if(TWI_char_index<19) //If not last character
 2c4:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <TWI_char_index>
 2c8:	83 31       	cpi	r24, 0x13	; 19
 2ca:	20 f4       	brcc	.+8      	; 0x2d4 <_Z21UpdateTWIDisplayStatev+0x1c8>
		{
			TWI_char_index++; //Increment index
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <TWI_char_index>
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <_Z21UpdateTWIDisplayStatev+0x1d6>
		}
		else //If last character
		{
			TWI_char_index = 0; //Reset index for next line
 2d4:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <TWI_char_index>
			display_state++; //Send stop signal
 2d8:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		}
		TWCR = TWCR_SEND; //Set TWINT to send data
 2e2:	85 e8       	ldi	r24, 0x85	; 133
 2e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 2e8:	df c0       	rjmp	.+446    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 14: //Create Stop Condition
		TWCR = TWCR_STOP;//finish transaction
 2ea:	85 e9       	ldi	r24, 0x95	; 149
 2ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state =0;
 2f0:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <display_state>
		break;
 2f4:	d9 c0       	rjmp	.+434    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		/************************************************************************/
		/* Initialization States                                                */
		/************************************************************************/
		case 17: //Initialize Step One
		DummyLoop(400);//Wait 40ms for powerup
 2f6:	80 e9       	ldi	r24, 0x90	; 144
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 75 00 	call	0xea	; 0xea <_Z9DummyLoopj>

		TWCR = TWCR_START;
 2fe:	85 ea       	ldi	r24, 0xA5	; 165
 300:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 304:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 308:	8f 5f       	subi	r24, 0xFF	; 255
 30a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 30e:	cc c0       	rjmp	.+408    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 18:
		TWDR = 0x78; //Set TWI slave address
 310:	88 e7       	ldi	r24, 0x78	; 120
 312:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Send address
 316:	85 e8       	ldi	r24, 0x85	; 133
 318:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 31c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 320:	8f 5f       	subi	r24, 0xFF	; 255
 322:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 326:	c0 c0       	rjmp	.+384    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 19: //Send control byte for instruction
		TWDR = 0x80; //Instruction 0x80
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 32e:	85 e8       	ldi	r24, 0x85	; 133
 330:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 334:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 338:	8f 5f       	subi	r24, 0xFF	; 255
 33a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 33e:	b4 c0       	rjmp	.+360    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 20: //Set Function Mode
		TWDR = 0x38;
 340:	88 e3       	ldi	r24, 0x38	; 56
 342:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 346:	85 e8       	ldi	r24, 0x85	; 133
 348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 34c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 350:	8f 5f       	subi	r24, 0xFF	; 255
 352:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 356:	a8 c0       	rjmp	.+336    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 21: //Send Stop and Wait
		TWCR = TWCR_STOP;//finish transaction
 358:	cc eb       	ldi	r28, 0xBC	; 188
 35a:	d0 e0       	ldi	r29, 0x00	; 0
 35c:	85 e9       	ldi	r24, 0x95	; 149
 35e:	88 83       	st	Y, r24
		DummyLoop(1);//Delay 100us
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 75 00 	call	0xea	; 0xea <_Z9DummyLoopj>
		TWCR = TWCR_START;//Start next transaction
 368:	85 ea       	ldi	r24, 0xA5	; 165
 36a:	88 83       	st	Y, r24
		display_state++;
 36c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 370:	8f 5f       	subi	r24, 0xFF	; 255
 372:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 376:	98 c0       	rjmp	.+304    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 22: //Send Slave Address
		TWDR = 0x78; //Set TWI slave address
 378:	88 e7       	ldi	r24, 0x78	; 120
 37a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Send address
 37e:	85 e8       	ldi	r24, 0x85	; 133
 380:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 384:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 388:	8f 5f       	subi	r24, 0xFF	; 255
 38a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 38e:	8c c0       	rjmp	.+280    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 23: //Send control byte for instruction
		TWDR = 0x80; //Instruction 0x80
 390:	80 e8       	ldi	r24, 0x80	; 128
 392:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 396:	85 e8       	ldi	r24, 0x85	; 133
 398:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 39c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 3a0:	8f 5f       	subi	r24, 0xFF	; 255
 3a2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 3a6:	80 c0       	rjmp	.+256    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 24: //Turn on Display, Cursor, and Blink
		TWDR = 0x0C; //Instruction 0x80
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 3ae:	85 e8       	ldi	r24, 0x85	; 133
 3b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 3b4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 3be:	74 c0       	rjmp	.+232    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 25: //Send Stop and Wait
		TWCR = TWCR_STOP;//finish transaction
 3c0:	cc eb       	ldi	r28, 0xBC	; 188
 3c2:	d0 e0       	ldi	r29, 0x00	; 0
 3c4:	85 e9       	ldi	r24, 0x95	; 149
 3c6:	88 83       	st	Y, r24
		DummyLoop(1);//Delay 100us
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 75 00 	call	0xea	; 0xea <_Z9DummyLoopj>
		TWCR = TWCR_START;//Start next transaction
 3d0:	85 ea       	ldi	r24, 0xA5	; 165
 3d2:	88 83       	st	Y, r24
		display_state++;
 3d4:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 3d8:	8f 5f       	subi	r24, 0xFF	; 255
 3da:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 3de:	64 c0       	rjmp	.+200    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 26: //Send Slave Address
		TWDR = 0x78; //Set TWI slave address
 3e0:	88 e7       	ldi	r24, 0x78	; 120
 3e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Send address
 3e6:	85 e8       	ldi	r24, 0x85	; 133
 3e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 3ec:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 3f6:	58 c0       	rjmp	.+176    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 27: //Send control byte for instruction
		TWDR = 0x80; //Instruction 0x80
 3f8:	80 e8       	ldi	r24, 0x80	; 128
 3fa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 3fe:	85 e8       	ldi	r24, 0x85	; 133
 400:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 404:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 408:	8f 5f       	subi	r24, 0xFF	; 255
 40a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 40e:	4c c0       	rjmp	.+152    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 28: //Clear Display
		TWDR = 0x01; //Instruction 0x01
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 416:	85 e8       	ldi	r24, 0x85	; 133
 418:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 41c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 426:	40 c0       	rjmp	.+128    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 29: //Send Stop and Wait
		TWCR = TWCR_STOP;//finish transaction
 428:	cc eb       	ldi	r28, 0xBC	; 188
 42a:	d0 e0       	ldi	r29, 0x00	; 0
 42c:	85 e9       	ldi	r24, 0x95	; 149
 42e:	88 83       	st	Y, r24
		DummyLoop(100);//Delay 10ms
 430:	84 e6       	ldi	r24, 0x64	; 100
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 75 00 	call	0xea	; 0xea <_Z9DummyLoopj>
		TWCR = TWCR_START;//Start next transaction
 438:	85 ea       	ldi	r24, 0xA5	; 165
 43a:	88 83       	st	Y, r24
		display_state++;
 43c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 440:	8f 5f       	subi	r24, 0xFF	; 255
 442:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 446:	30 c0       	rjmp	.+96     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 30: //Send Slave Address
		TWDR = 0x78; //Set TWI slave address
 448:	88 e7       	ldi	r24, 0x78	; 120
 44a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Send address
 44e:	85 e8       	ldi	r24, 0x85	; 133
 450:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 454:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 458:	8f 5f       	subi	r24, 0xFF	; 255
 45a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 45e:	24 c0       	rjmp	.+72     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 31: //Send control byte for instruction
		TWDR = 0x80; //Instruction 0x80
 460:	80 e8       	ldi	r24, 0x80	; 128
 462:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 466:	85 e8       	ldi	r24, 0x85	; 133
 468:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 46c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 470:	8f 5f       	subi	r24, 0xFF	; 255
 472:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 476:	18 c0       	rjmp	.+48     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 32: //Clear Display
		TWDR = 0x01; //Instruction 0x01
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = TWCR_SEND; //Set TWINT to send data
 47e:	85 e8       	ldi	r24, 0x85	; 133
 480:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		display_state++;
 484:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <display_state>
 488:	8f 5f       	subi	r24, 0xFF	; 255
 48a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
		break;
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		case 33: //Send Stop and Wait
		TWCR = TWCR_STOP;//finish transaction
 490:	85 e9       	ldi	r24, 0x95	; 149
 492:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		DummyLoop(1);//Delay 100us
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 75 00 	call	0xea	; 0xea <_Z9DummyLoopj>
		display_state=0;
 49e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <display_state>
		break;
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		default:
		display_state = 0;
 4a4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <display_state>
	}

}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <__vector_24>:
/************************************************************************/
/* Define TWI Functions                                                 */
/************************************************************************/

ISR(TWI_vect)
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	PORTD ^= (1<<PORTD2);
 4d0:	9b b1       	in	r25, 0x0b	; 11
 4d2:	84 e0       	ldi	r24, 0x04	; 4
 4d4:	89 27       	eor	r24, r25
 4d6:	8b b9       	out	0x0b, r24	; 11
	//Read status register and mask out prescaler bits
	uint8_t status = TWSR & 0xF8;
 4d8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 4dc:	88 7f       	andi	r24, 0xF8	; 248

	//Switch based on status of TWI interface
	switch(status)
 4de:	80 31       	cpi	r24, 0x10	; 16
 4e0:	61 f0       	breq	.+24     	; 0x4fa <__vector_24+0x4c>
 4e2:	18 f4       	brcc	.+6      	; 0x4ea <__vector_24+0x3c>
 4e4:	88 30       	cpi	r24, 0x08	; 8
 4e6:	31 f0       	breq	.+12     	; 0x4f4 <__vector_24+0x46>
 4e8:	10 c0       	rjmp	.+32     	; 0x50a <__vector_24+0x5c>
 4ea:	88 31       	cpi	r24, 0x18	; 24
 4ec:	49 f0       	breq	.+18     	; 0x500 <__vector_24+0x52>
 4ee:	88 32       	cpi	r24, 0x28	; 40
 4f0:	51 f0       	breq	.+20     	; 0x506 <__vector_24+0x58>
 4f2:	0b c0       	rjmp	.+22     	; 0x50a <__vector_24+0x5c>
	{
		case 0x08: //Start Condition Transmitted
		UpdateTWIDisplayState();
 4f4:	0e 94 86 00 	call	0x10c	; 0x10c <_Z21UpdateTWIDisplayStatev>
		break;
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <__vector_24+0x5c>
		case 0x10: //Repeat Start Condition Transmitted
		UpdateTWIDisplayState();
 4fa:	0e 94 86 00 	call	0x10c	; 0x10c <_Z21UpdateTWIDisplayStatev>
		break;
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <__vector_24+0x5c>
		case 0x18: //SLA+W transmitted and ACK received
		UpdateTWIDisplayState();
 500:	0e 94 86 00 	call	0x10c	; 0x10c <_Z21UpdateTWIDisplayStatev>
		break;
 504:	02 c0       	rjmp	.+4      	; 0x50a <__vector_24+0x5c>
		case 0x20: //SLA+W transmitted and ACK NOT received
		//This is an error, do something application specific
		break;
		case 0x28: //Data byte transmitted and ACK received
		UpdateTWIDisplayState();
 506:	0e 94 86 00 	call	0x10c	; 0x10c <_Z21UpdateTWIDisplayStatev>
		break;
		case 0x30: //Data byte transmitted and ACK NOT received
		//This is an error, do something application specific
		break;
	}
	PORTD ^= (1<<PORTD2);
 50a:	9b b1       	in	r25, 0x0b	; 11
 50c:	84 e0       	ldi	r24, 0x04	; 4
 50e:	89 27       	eor	r24, r25
 510:	8b b9       	out	0x0b, r24	; 11
}
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <_Z13SetMotorSpeedhh>:
/* Motor Control                                                        */
/************************************************************************/
void SetMotorSpeed(uint8_t left, uint8_t right) {
	
	/* Configuring DC% */
	OCR0A = left;
 534:	87 bd       	out	0x27, r24	; 39
	OCR0B = right;
 536:	68 bd       	out	0x28, r22	; 40
 538:	08 95       	ret

0000053a <main>:
	//Configure I/O
	//**************************************************************************************
	// PORTB
	// PB3 (out): PWM Timer 0A, Left Motor
	// PB4 (out): PWM Timer 0B, Right Motor
	DDRB = (1<<PORTB4)|(1<<PORTB3);
 53a:	88 e1       	ldi	r24, 0x18	; 24
 53c:	84 b9       	out	0x04, r24	; 4
	// PC2 (in): ADC2, IR Prox Sensor Right
	// PC3 (in): ADC3, Photor Resistor
	// PC4 (out): SDA, I2C Display
	// PC5 (out): SCL, I2C Display
	// PC6 (in): RESET
	DDRC = (0<<PORTC6)|(1<<PORTC5)|(1<<PORTC4)|(0<<PORTC3)|(0<<PORTC2)|(0<<PORTC1)|(0<<PORTC0);
 53e:	80 e3       	ldi	r24, 0x30	; 48
 540:	87 b9       	out	0x07, r24	; 7
	// PD0 (in): Digital, Line Sensor
	// PD1 (out): Digital, Debug 0
	// PD2 (out): Digital, Debug 1
	// PD3 (out): Digital, Alarm Relay Control
	// PD4 (in): INT0, Bump Sensor (Hardware Debounced)
	DDRD = (0<<PORTD4)|(1<<PORTD3)|(1<<PORTD2)|(1<<PORTD1)|(0<<PORTD0);
 542:	8e e0       	ldi	r24, 0x0E	; 14
 544:	8a b9       	out	0x0a, r24	; 10
	//**************************************************************************************
	// COM0A1 COM0A0 => Clear OC0A on compare match, set OC0A at BOTTOM (non-inverting mode)
	// COM0B1 COM0B0 => Clear OC0B on compare match, set OC0B at BOTTOM (non-inverting mode)
	// WGM02 WGM01 WGM00 => Fast PWM, TOP 0xFF, Update of OCRx at 0x00, TOV Flag set on 0xFF
	// CS02 CS01 CS00 => ClkIO/1024 (15 kHz)
	TCCR0A = (1<<COM0B1)|(0<<COM0B0)|(1<<COM0A1)|(0<<COM0A0)|(1<<WGM01)|(1<<WGM00);
 546:	83 ea       	ldi	r24, 0xA3	; 163
 548:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (0<<WGM02)|(1<<CS02)|(0<<CS01)|(1<<CS00);
 54a:	85 e0       	ldi	r24, 0x05	; 5
 54c:	85 bd       	out	0x25, r24	; 37

	// Initialize Motor Speeds to zero
	OCR0A = 0;
 54e:	17 bc       	out	0x27, r1	; 39
	OCR0B = 0;
 550:	18 bc       	out	0x28, r1	; 40

	//**************************************************************************************
	//Configure Timer 1 (TWI and ADC)
	//**************************************************************************************
    //No Pin Toggles, CTC Mode
    TCCR1A = (0<<COM1A1)|(1<<COM1A0)|(0<<COM1B1)|(0<<COM1B0)|(0<<WGM11)|(0<<WGM01);
 552:	90 e4       	ldi	r25, 0x40	; 64
 554:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    //CTC Mode, N=64
    TCCR1B = (0<<ICNC1)|(0<<ICES1)|(0<<WGM13)|(1<<WGM12)|(0<<CS12)|(1<<CS11)|(1<<CS10);
 558:	9b e0       	ldi	r25, 0x0B	; 11
 55a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    //Enable Channel A Match Interrupt
    TIMSK1 = (0<<ICIE1)|(0<<OCIE1B)|(1<<OCIE1A)|(0<<TOIE1);
 55e:	c2 e0       	ldi	r28, 0x02	; 2
 560:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
    //Setup output compare for channel A
    OCR1A = 24999; //OCR1A = 16Mhz/N*Deltat-1 = 16Mhz/64*.1-1
 564:	27 ea       	ldi	r18, 0xA7	; 167
 566:	31 e6       	ldi	r19, 0x61	; 97
 568:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 56c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	//**************************************************************************************
	//Configure TWI
	//**************************************************************************************
    //Configure TWI module (no interrupts)
    //Configure Bit Rate (TWBR)
    TWBR = 50;
 570:	92 e3       	ldi	r25, 0x32	; 50
 572:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    //TWEA: 0 - No acknowledge Bit
    //TWSTA: 0 - Start Condition Bit
    //TWSTO: 0 - Stop Condition
    //TWEN: 1 - Enable TWI Interface
    //TWIE: 0 - Disable Interrupt
    TWCR = (0<<TWINT)|(0<<TWEA)|(0<<TWSTO)|(0<<TWWC)|(1<<TWEN)|(1<<TWIE);
 576:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    //Configure TWI Status Register (TWSR)
    //TWS7-TWS3: 00000 - Don't change status
    //TWPS1-TWPS0: 10 - Prescaler Value = 64
    TWSR = (0<<TWS7)|(0<<TWS6)|(0<<TWS5)|(0<<TWS4)|(0<<TWS3)|(1<<TWPS1)|(0<<TWPS0);
 57a:	c0 93 b9 00 	sts	0x00B9, r28	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

	//Initialize Display
	display_state=17;//Set state machine to initialization section
 57e:	81 e1       	ldi	r24, 0x11	; 17
 580:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <display_state>
	UpdateTWIDisplayState();//Run state machine
 584:	0e 94 86 00 	call	0x10c	; 0x10c <_Z21UpdateTWIDisplayStatev>
	
	//**************************************************************************************
	//Configure ADC
	//**************************************************************************************
	// ADC7-0 in low word, ADC9-8 are in high word
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0)|(1<<ADLAR); // Start at ADC0
 588:	80 e6       	ldi	r24, 0x60	; 96
 58a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 58e:	8f e8       	ldi	r24, 0x8F	; 143
 590:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	DIDR0 = (1<<ADC1D);
 594:	c0 93 7e 00 	sts	0x007E, r28	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
	
	//*********************************************************************
	//Configure External Interrupt 0 (Bump Sensor)
	//*********************************************************************
	EICRA = (1<<ISC01)|(0<<ISC00); // Detect falling edge
 598:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = (1<<INT0);//Enable INT0
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	8d bb       	out	0x1d, r24	; 29
	
    sei();
 5a0:	78 94       	sei
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <main+0x68>

000005a4 <__vector_21>:
    /* Replace with your application code */
    while (1) {}
}

ISR(ADC_vect)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
	static uint8_t adc_index = 0;
	const uint8_t adcmux_init = (0<<REFS1)|(1<<REFS0)|(1<<ADLAR)|(0<<MUX3)|(0<<MUX2)|(0<<MUX1)|(0<<MUX0);
	uint8_t adc_read = 0;
	
	// Always read ADC
	adc_read = ADCL >> 6;
 5b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	08 2e       	mov	r0, r24
 5be:	89 2f       	mov	r24, r25
 5c0:	00 0c       	add	r0, r0
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 0b       	sbc	r25, r25
 5c6:	00 0c       	add	r0, r0
 5c8:	88 1f       	adc	r24, r24
 5ca:	99 1f       	adc	r25, r25
	adc_read |= (ADCH << 2);
 5cc:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	22 0f       	add	r18, r18
 5d4:	33 1f       	adc	r19, r19
 5d6:	22 0f       	add	r18, r18
 5d8:	33 1f       	adc	r19, r19
 5da:	82 2b       	or	r24, r18
	
	// Handle appropriate signals
	switch(adc_index)
 5dc:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <__data_end>
 5e0:	91 30       	cpi	r25, 0x01	; 1
 5e2:	49 f0       	breq	.+18     	; 0x5f6 <__vector_21+0x52>
 5e4:	28 f0       	brcs	.+10     	; 0x5f0 <__vector_21+0x4c>
 5e6:	92 30       	cpi	r25, 0x02	; 2
 5e8:	49 f0       	breq	.+18     	; 0x5fc <__vector_21+0x58>
 5ea:	93 30       	cpi	r25, 0x03	; 3
 5ec:	51 f0       	breq	.+20     	; 0x602 <__vector_21+0x5e>
 5ee:	0b c0       	rjmp	.+22     	; 0x606 <__vector_21+0x62>
	{
		case 0: // ADC0
			left_sensor = adc_read;
 5f0:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <left_sensor>
			break;
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <__vector_21+0x62>
		case 1: // ADC1
			ir_beacon_sensor = adc_read;
 5f6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <ir_beacon_sensor>
			break;
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <__vector_21+0x62>
		case 2: // ADC2
			right_sensor = adc_read;
 5fc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <right_sensor>
			break;
 600:	02 c0       	rjmp	.+4      	; 0x606 <__vector_21+0x62>
		case 3: // ADC3
			photo_res_sensor = adc_read;
 602:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <photo_res_sensor>
			break;
	}
	
	/* Toggle ADC Conversion Complete Breadcrumb */
	PORTD ^= (1<<PORTD1);
 606:	9b b1       	in	r25, 0x0b	; 11
 608:	82 e0       	ldi	r24, 0x02	; 2
 60a:	89 27       	eor	r24, r25
 60c:	8b b9       	out	0x0b, r24	; 11

	// Setting up next conversion
	adc_index++;
 60e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 612:	8f 5f       	subi	r24, 0xFF	; 255
 614:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <__data_end>

	if (adc_index > 3)
 618:	84 30       	cpi	r24, 0x04	; 4
 61a:	10 f0       	brcs	.+4      	; 0x620 <__vector_21+0x7c>
	{
		adc_index = 0;
 61c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
	}
	
	ADCSRB = (adcmux_init & 0xF0) | adc_index;
 620:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 624:	80 66       	ori	r24, 0x60	; 96
 626:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>

}
 62a:	9f 91       	pop	r25
 62c:	8f 91       	pop	r24
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <__vector_1>:

ISR(INT0_vect)
{
 63c:	1f 92       	push	r1
 63e:	0f 92       	push	r0
 640:	0f b6       	in	r0, 0x3f	; 63
 642:	0f 92       	push	r0
 644:	11 24       	eor	r1, r1
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
	// TODO: Write Bump Routine
	
	bump_sensor = (PIND >> PIND4) & 0b1;
 64a:	89 b1       	in	r24, 0x09	; 9
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	95 95       	asr	r25
 650:	87 95       	ror	r24
 652:	95 95       	asr	r25
 654:	87 95       	ror	r24
 656:	95 95       	asr	r25
 658:	87 95       	ror	r24
 65a:	95 95       	asr	r25
 65c:	87 95       	ror	r24
 65e:	81 70       	andi	r24, 0x01	; 1
 660:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <bump_sensor>
}
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <__vector_11>:

ISR(TIMER1_COMPA_vect)
{
 672:	1f 92       	push	r1
 674:	0f 92       	push	r0
 676:	0f b6       	in	r0, 0x3f	; 63
 678:	0f 92       	push	r0
 67a:	11 24       	eor	r1, r1
 67c:	2f 93       	push	r18
 67e:	3f 93       	push	r19
 680:	4f 93       	push	r20
 682:	5f 93       	push	r21
 684:	6f 93       	push	r22
 686:	7f 93       	push	r23
 688:	8f 93       	push	r24
 68a:	9f 93       	push	r25
 68c:	af 93       	push	r26
 68e:	bf 93       	push	r27
 690:	cf 93       	push	r28
 692:	ef 93       	push	r30
 694:	ff 93       	push	r31
	//static uint8_t bcount = 0; // Number of iterations in reverse
	const uint8_t threshold = 200;
	
	ADCSRA |= (1<<ADSC); //Start Conversion
 696:	ea e7       	ldi	r30, 0x7A	; 122
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	80 64       	ori	r24, 0x40	; 64
 69e:	80 83       	st	Z, r24
	/* Mux to other ADC */	
	ADMUX = (0<<REFS1)|(1<<REFS0)|(0<<MUX2)|(0<<MUX1)|(1<<MUX0)|(1<<ADLAR); // ADC0 and ADC 1
 6a0:	81 e6       	ldi	r24, 0x61	; 97
 6a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
		
	/* Display frame rate: 500ms (Based on 10ms Timer 1) */
	if (lcd_counter > 50) {
 6a6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lcd_counter>
 6aa:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <lcd_counter+0x1>
 6ae:	c3 97       	sbiw	r24, 0x33	; 51
 6b0:	4c f0       	brlt	.+18     	; 0x6c4 <__vector_11+0x52>
		//Start New LCD Screen Update
		display_state = 0;
 6b2:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <display_state>
		if(display_state==0) {
			UpdateTWIDisplayState();
 6b6:	0e 94 86 00 	call	0x10c	; 0x10c <_Z21UpdateTWIDisplayStatev>
		}
		
		lcd_counter = 0;
 6ba:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <lcd_counter+0x1>
 6be:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <lcd_counter>
 6c2:	09 c0       	rjmp	.+18     	; 0x6d6 <__vector_11+0x64>
	} else { lcd_counter++; }
 6c4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <lcd_counter>
 6c8:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <lcd_counter+0x1>
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <lcd_counter+0x1>
 6d2:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <lcd_counter>
	//**************************************************************************************
	
	// TODO: PID Controller here
	
	// Obstacle Avoidance
	if (left_sensor < threshold)
 6d6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <left_sensor>
 6da:	88 3c       	cpi	r24, 0xC8	; 200
 6dc:	28 f4       	brcc	.+10     	; 0x6e8 <__vector_11+0x76>
	{
		SetMotorSpeed(200, 50);
 6de:	62 e3       	ldi	r22, 0x32	; 50
 6e0:	88 ec       	ldi	r24, 0xC8	; 200
 6e2:	0e 94 9a 02 	call	0x534	; 0x534 <_Z13SetMotorSpeedhh>
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <__vector_11+0x90>
	}
	else if (right_sensor < threshold)
 6e8:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <right_sensor>
 6ec:	88 3c       	cpi	r24, 0xC8	; 200
 6ee:	28 f4       	brcc	.+10     	; 0x6fa <__vector_11+0x88>
	{
		SetMotorSpeed(50, 200);
 6f0:	68 ec       	ldi	r22, 0xC8	; 200
 6f2:	82 e3       	ldi	r24, 0x32	; 50
 6f4:	0e 94 9a 02 	call	0x534	; 0x534 <_Z13SetMotorSpeedhh>
 6f8:	04 c0       	rjmp	.+8      	; 0x702 <__vector_11+0x90>
	}
	else // Move forward
	{
		SetMotorSpeed(200, 200);
 6fa:	68 ec       	ldi	r22, 0xC8	; 200
 6fc:	88 ec       	ldi	r24, 0xC8	; 200
 6fe:	0e 94 9a 02 	call	0x534	; 0x534 <_Z13SetMotorSpeedhh>
	}
	
	//**************************************************************************************
	// Write to Display here
	//**************************************************************************************
	snprintf((char *)FirstLineStr, 21, "M1:%u", left_sensor);
 702:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <left_sensor>
 706:	1f 92       	push	r1
 708:	8f 93       	push	r24
 70a:	8b e5       	ldi	r24, 0x5B	; 91
 70c:	91 e0       	ldi	r25, 0x01	; 1
 70e:	9f 93       	push	r25
 710:	8f 93       	push	r24
 712:	1f 92       	push	r1
 714:	c5 e1       	ldi	r28, 0x15	; 21
 716:	cf 93       	push	r28
 718:	8f e3       	ldi	r24, 0x3F	; 63
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	9f 93       	push	r25
 71e:	8f 93       	push	r24
 720:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <snprintf>
	snprintf((char *)SecondLineStr, 21, "M2:%u", right_sensor);
 724:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <right_sensor>
 728:	1f 92       	push	r1
 72a:	8f 93       	push	r24
 72c:	81 e6       	ldi	r24, 0x61	; 97
 72e:	91 e0       	ldi	r25, 0x01	; 1
 730:	9f 93       	push	r25
 732:	8f 93       	push	r24
 734:	1f 92       	push	r1
 736:	cf 93       	push	r28
 738:	8a e2       	ldi	r24, 0x2A	; 42
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	9f 93       	push	r25
 73e:	8f 93       	push	r24
 740:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <snprintf>
	snprintf((char *)ThirdLineStr, 21, "Button: %-13s", (bump_sensor ? "On" : "Off"));	
 744:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <bump_sensor>
 748:	2d b7       	in	r18, 0x3d	; 61
 74a:	3e b7       	in	r19, 0x3e	; 62
 74c:	20 5f       	subi	r18, 0xF0	; 240
 74e:	3f 4f       	sbci	r19, 0xFF	; 255
 750:	0f b6       	in	r0, 0x3f	; 63
 752:	f8 94       	cli
 754:	3e bf       	out	0x3e, r19	; 62
 756:	0f be       	out	0x3f, r0	; 63
 758:	2d bf       	out	0x3d, r18	; 61
 75a:	88 23       	and	r24, r24
 75c:	19 f0       	breq	.+6      	; 0x764 <__vector_11+0xf2>
 75e:	84 e5       	ldi	r24, 0x54	; 84
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	02 c0       	rjmp	.+4      	; 0x768 <__vector_11+0xf6>
 764:	87 e5       	ldi	r24, 0x57	; 87
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	9f 93       	push	r25
 76a:	8f 93       	push	r24
 76c:	87 e6       	ldi	r24, 0x67	; 103
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	9f 93       	push	r25
 772:	8f 93       	push	r24
 774:	1f 92       	push	r1
 776:	85 e1       	ldi	r24, 0x15	; 21
 778:	8f 93       	push	r24
 77a:	85 e1       	ldi	r24, 0x15	; 21
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	9f 93       	push	r25
 780:	8f 93       	push	r24
 782:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <snprintf>
	
	time_counter++;
 786:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <time_counter>
 78a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <time_counter+0x1>
 78e:	01 96       	adiw	r24, 0x01	; 1
 790:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <time_counter+0x1>
 794:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <time_counter>
}
 798:	8d b7       	in	r24, 0x3d	; 61
 79a:	9e b7       	in	r25, 0x3e	; 62
 79c:	08 96       	adiw	r24, 0x08	; 8
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	9e bf       	out	0x3e, r25	; 62
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	8d bf       	out	0x3d, r24	; 61
 7a8:	ff 91       	pop	r31
 7aa:	ef 91       	pop	r30
 7ac:	cf 91       	pop	r28
 7ae:	bf 91       	pop	r27
 7b0:	af 91       	pop	r26
 7b2:	9f 91       	pop	r25
 7b4:	8f 91       	pop	r24
 7b6:	7f 91       	pop	r23
 7b8:	6f 91       	pop	r22
 7ba:	5f 91       	pop	r21
 7bc:	4f 91       	pop	r20
 7be:	3f 91       	pop	r19
 7c0:	2f 91       	pop	r18
 7c2:	0f 90       	pop	r0
 7c4:	0f be       	out	0x3f, r0	; 63
 7c6:	0f 90       	pop	r0
 7c8:	1f 90       	pop	r1
 7ca:	18 95       	reti

000007cc <__tablejump2__>:
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	05 90       	lpm	r0, Z+
 7d2:	f4 91       	lpm	r31, Z
 7d4:	e0 2d       	mov	r30, r0
 7d6:	09 94       	ijmp

000007d8 <snprintf>:
 7d8:	ae e0       	ldi	r26, 0x0E	; 14
 7da:	b0 e0       	ldi	r27, 0x00	; 0
 7dc:	e2 ef       	ldi	r30, 0xF2	; 242
 7de:	f3 e0       	ldi	r31, 0x03	; 3
 7e0:	0c 94 bb 06 	jmp	0xd76	; 0xd76 <__prologue_saves__+0x1c>
 7e4:	0d 89       	ldd	r16, Y+21	; 0x15
 7e6:	1e 89       	ldd	r17, Y+22	; 0x16
 7e8:	8f 89       	ldd	r24, Y+23	; 0x17
 7ea:	98 8d       	ldd	r25, Y+24	; 0x18
 7ec:	26 e0       	ldi	r18, 0x06	; 6
 7ee:	2c 83       	std	Y+4, r18	; 0x04
 7f0:	1a 83       	std	Y+2, r17	; 0x02
 7f2:	09 83       	std	Y+1, r16	; 0x01
 7f4:	97 ff       	sbrs	r25, 7
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <snprintf+0x24>
 7f8:	80 e0       	ldi	r24, 0x00	; 0
 7fa:	90 e8       	ldi	r25, 0x80	; 128
 7fc:	01 97       	sbiw	r24, 0x01	; 1
 7fe:	9e 83       	std	Y+6, r25	; 0x06
 800:	8d 83       	std	Y+5, r24	; 0x05
 802:	ae 01       	movw	r20, r28
 804:	45 5e       	subi	r20, 0xE5	; 229
 806:	5f 4f       	sbci	r21, 0xFF	; 255
 808:	69 8d       	ldd	r22, Y+25	; 0x19
 80a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 80c:	ce 01       	movw	r24, r28
 80e:	01 96       	adiw	r24, 0x01	; 1
 810:	0e 94 1c 04 	call	0x838	; 0x838 <vfprintf>
 814:	4d 81       	ldd	r20, Y+5	; 0x05
 816:	5e 81       	ldd	r21, Y+6	; 0x06
 818:	57 fd       	sbrc	r21, 7
 81a:	0a c0       	rjmp	.+20     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 81c:	2f 81       	ldd	r18, Y+7	; 0x07
 81e:	38 85       	ldd	r19, Y+8	; 0x08
 820:	42 17       	cp	r20, r18
 822:	53 07       	cpc	r21, r19
 824:	0c f4       	brge	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 826:	9a 01       	movw	r18, r20
 828:	f8 01       	movw	r30, r16
 82a:	e2 0f       	add	r30, r18
 82c:	f3 1f       	adc	r31, r19
 82e:	10 82       	st	Z, r1
 830:	2e 96       	adiw	r28, 0x0e	; 14
 832:	e4 e0       	ldi	r30, 0x04	; 4
 834:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__epilogue_restores__+0x1c>

00000838 <vfprintf>:
 838:	ab e0       	ldi	r26, 0x0B	; 11
 83a:	b0 e0       	ldi	r27, 0x00	; 0
 83c:	e2 e2       	ldi	r30, 0x22	; 34
 83e:	f4 e0       	ldi	r31, 0x04	; 4
 840:	0c 94 ad 06 	jmp	0xd5a	; 0xd5a <__prologue_saves__>
 844:	6c 01       	movw	r12, r24
 846:	7b 01       	movw	r14, r22
 848:	8a 01       	movw	r16, r20
 84a:	fc 01       	movw	r30, r24
 84c:	17 82       	std	Z+7, r1	; 0x07
 84e:	16 82       	std	Z+6, r1	; 0x06
 850:	83 81       	ldd	r24, Z+3	; 0x03
 852:	81 ff       	sbrs	r24, 1
 854:	cc c1       	rjmp	.+920    	; 0xbee <__stack+0x2ef>
 856:	ce 01       	movw	r24, r28
 858:	01 96       	adiw	r24, 0x01	; 1
 85a:	3c 01       	movw	r6, r24
 85c:	f6 01       	movw	r30, r12
 85e:	93 81       	ldd	r25, Z+3	; 0x03
 860:	f7 01       	movw	r30, r14
 862:	93 fd       	sbrc	r25, 3
 864:	85 91       	lpm	r24, Z+
 866:	93 ff       	sbrs	r25, 3
 868:	81 91       	ld	r24, Z+
 86a:	7f 01       	movw	r14, r30
 86c:	88 23       	and	r24, r24
 86e:	09 f4       	brne	.+2      	; 0x872 <vfprintf+0x3a>
 870:	ba c1       	rjmp	.+884    	; 0xbe6 <__stack+0x2e7>
 872:	85 32       	cpi	r24, 0x25	; 37
 874:	39 f4       	brne	.+14     	; 0x884 <vfprintf+0x4c>
 876:	93 fd       	sbrc	r25, 3
 878:	85 91       	lpm	r24, Z+
 87a:	93 ff       	sbrs	r25, 3
 87c:	81 91       	ld	r24, Z+
 87e:	7f 01       	movw	r14, r30
 880:	85 32       	cpi	r24, 0x25	; 37
 882:	29 f4       	brne	.+10     	; 0x88e <vfprintf+0x56>
 884:	b6 01       	movw	r22, r12
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 88c:	e7 cf       	rjmp	.-50     	; 0x85c <vfprintf+0x24>
 88e:	91 2c       	mov	r9, r1
 890:	21 2c       	mov	r2, r1
 892:	31 2c       	mov	r3, r1
 894:	ff e1       	ldi	r31, 0x1F	; 31
 896:	f3 15       	cp	r31, r3
 898:	d8 f0       	brcs	.+54     	; 0x8d0 <vfprintf+0x98>
 89a:	8b 32       	cpi	r24, 0x2B	; 43
 89c:	79 f0       	breq	.+30     	; 0x8bc <vfprintf+0x84>
 89e:	38 f4       	brcc	.+14     	; 0x8ae <vfprintf+0x76>
 8a0:	80 32       	cpi	r24, 0x20	; 32
 8a2:	79 f0       	breq	.+30     	; 0x8c2 <vfprintf+0x8a>
 8a4:	83 32       	cpi	r24, 0x23	; 35
 8a6:	a1 f4       	brne	.+40     	; 0x8d0 <vfprintf+0x98>
 8a8:	23 2d       	mov	r18, r3
 8aa:	20 61       	ori	r18, 0x10	; 16
 8ac:	1d c0       	rjmp	.+58     	; 0x8e8 <vfprintf+0xb0>
 8ae:	8d 32       	cpi	r24, 0x2D	; 45
 8b0:	61 f0       	breq	.+24     	; 0x8ca <vfprintf+0x92>
 8b2:	80 33       	cpi	r24, 0x30	; 48
 8b4:	69 f4       	brne	.+26     	; 0x8d0 <vfprintf+0x98>
 8b6:	23 2d       	mov	r18, r3
 8b8:	21 60       	ori	r18, 0x01	; 1
 8ba:	16 c0       	rjmp	.+44     	; 0x8e8 <vfprintf+0xb0>
 8bc:	83 2d       	mov	r24, r3
 8be:	82 60       	ori	r24, 0x02	; 2
 8c0:	38 2e       	mov	r3, r24
 8c2:	e3 2d       	mov	r30, r3
 8c4:	e4 60       	ori	r30, 0x04	; 4
 8c6:	3e 2e       	mov	r3, r30
 8c8:	2a c0       	rjmp	.+84     	; 0x91e <__stack+0x1f>
 8ca:	f3 2d       	mov	r31, r3
 8cc:	f8 60       	ori	r31, 0x08	; 8
 8ce:	1d c0       	rjmp	.+58     	; 0x90a <__stack+0xb>
 8d0:	37 fc       	sbrc	r3, 7
 8d2:	2d c0       	rjmp	.+90     	; 0x92e <__stack+0x2f>
 8d4:	20 ed       	ldi	r18, 0xD0	; 208
 8d6:	28 0f       	add	r18, r24
 8d8:	2a 30       	cpi	r18, 0x0A	; 10
 8da:	40 f0       	brcs	.+16     	; 0x8ec <vfprintf+0xb4>
 8dc:	8e 32       	cpi	r24, 0x2E	; 46
 8de:	b9 f4       	brne	.+46     	; 0x90e <__stack+0xf>
 8e0:	36 fc       	sbrc	r3, 6
 8e2:	81 c1       	rjmp	.+770    	; 0xbe6 <__stack+0x2e7>
 8e4:	23 2d       	mov	r18, r3
 8e6:	20 64       	ori	r18, 0x40	; 64
 8e8:	32 2e       	mov	r3, r18
 8ea:	19 c0       	rjmp	.+50     	; 0x91e <__stack+0x1f>
 8ec:	36 fe       	sbrs	r3, 6
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <vfprintf+0xc4>
 8f0:	8a e0       	ldi	r24, 0x0A	; 10
 8f2:	98 9e       	mul	r9, r24
 8f4:	20 0d       	add	r18, r0
 8f6:	11 24       	eor	r1, r1
 8f8:	92 2e       	mov	r9, r18
 8fa:	11 c0       	rjmp	.+34     	; 0x91e <__stack+0x1f>
 8fc:	ea e0       	ldi	r30, 0x0A	; 10
 8fe:	2e 9e       	mul	r2, r30
 900:	20 0d       	add	r18, r0
 902:	11 24       	eor	r1, r1
 904:	22 2e       	mov	r2, r18
 906:	f3 2d       	mov	r31, r3
 908:	f0 62       	ori	r31, 0x20	; 32
 90a:	3f 2e       	mov	r3, r31
 90c:	08 c0       	rjmp	.+16     	; 0x91e <__stack+0x1f>
 90e:	8c 36       	cpi	r24, 0x6C	; 108
 910:	21 f4       	brne	.+8      	; 0x91a <__stack+0x1b>
 912:	83 2d       	mov	r24, r3
 914:	80 68       	ori	r24, 0x80	; 128
 916:	38 2e       	mov	r3, r24
 918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0x1f>
 91a:	88 36       	cpi	r24, 0x68	; 104
 91c:	41 f4       	brne	.+16     	; 0x92e <__stack+0x2f>
 91e:	f7 01       	movw	r30, r14
 920:	93 fd       	sbrc	r25, 3
 922:	85 91       	lpm	r24, Z+
 924:	93 ff       	sbrs	r25, 3
 926:	81 91       	ld	r24, Z+
 928:	7f 01       	movw	r14, r30
 92a:	81 11       	cpse	r24, r1
 92c:	b3 cf       	rjmp	.-154    	; 0x894 <vfprintf+0x5c>
 92e:	98 2f       	mov	r25, r24
 930:	9f 7d       	andi	r25, 0xDF	; 223
 932:	95 54       	subi	r25, 0x45	; 69
 934:	93 30       	cpi	r25, 0x03	; 3
 936:	28 f4       	brcc	.+10     	; 0x942 <__stack+0x43>
 938:	0c 5f       	subi	r16, 0xFC	; 252
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	9f e3       	ldi	r25, 0x3F	; 63
 93e:	99 83       	std	Y+1, r25	; 0x01
 940:	0d c0       	rjmp	.+26     	; 0x95c <__stack+0x5d>
 942:	83 36       	cpi	r24, 0x63	; 99
 944:	31 f0       	breq	.+12     	; 0x952 <__stack+0x53>
 946:	83 37       	cpi	r24, 0x73	; 115
 948:	71 f0       	breq	.+28     	; 0x966 <__stack+0x67>
 94a:	83 35       	cpi	r24, 0x53	; 83
 94c:	09 f0       	breq	.+2      	; 0x950 <__stack+0x51>
 94e:	59 c0       	rjmp	.+178    	; 0xa02 <__stack+0x103>
 950:	21 c0       	rjmp	.+66     	; 0x994 <__stack+0x95>
 952:	f8 01       	movw	r30, r16
 954:	80 81       	ld	r24, Z
 956:	89 83       	std	Y+1, r24	; 0x01
 958:	0e 5f       	subi	r16, 0xFE	; 254
 95a:	1f 4f       	sbci	r17, 0xFF	; 255
 95c:	88 24       	eor	r8, r8
 95e:	83 94       	inc	r8
 960:	91 2c       	mov	r9, r1
 962:	53 01       	movw	r10, r6
 964:	13 c0       	rjmp	.+38     	; 0x98c <__stack+0x8d>
 966:	28 01       	movw	r4, r16
 968:	f2 e0       	ldi	r31, 0x02	; 2
 96a:	4f 0e       	add	r4, r31
 96c:	51 1c       	adc	r5, r1
 96e:	f8 01       	movw	r30, r16
 970:	a0 80       	ld	r10, Z
 972:	b1 80       	ldd	r11, Z+1	; 0x01
 974:	36 fe       	sbrs	r3, 6
 976:	03 c0       	rjmp	.+6      	; 0x97e <__stack+0x7f>
 978:	69 2d       	mov	r22, r9
 97a:	70 e0       	ldi	r23, 0x00	; 0
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x83>
 97e:	6f ef       	ldi	r22, 0xFF	; 255
 980:	7f ef       	ldi	r23, 0xFF	; 255
 982:	c5 01       	movw	r24, r10
 984:	0e 94 08 06 	call	0xc10	; 0xc10 <strnlen>
 988:	4c 01       	movw	r8, r24
 98a:	82 01       	movw	r16, r4
 98c:	f3 2d       	mov	r31, r3
 98e:	ff 77       	andi	r31, 0x7F	; 127
 990:	3f 2e       	mov	r3, r31
 992:	16 c0       	rjmp	.+44     	; 0x9c0 <__stack+0xc1>
 994:	28 01       	movw	r4, r16
 996:	22 e0       	ldi	r18, 0x02	; 2
 998:	42 0e       	add	r4, r18
 99a:	51 1c       	adc	r5, r1
 99c:	f8 01       	movw	r30, r16
 99e:	a0 80       	ld	r10, Z
 9a0:	b1 80       	ldd	r11, Z+1	; 0x01
 9a2:	36 fe       	sbrs	r3, 6
 9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0xad>
 9a6:	69 2d       	mov	r22, r9
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	6f ef       	ldi	r22, 0xFF	; 255
 9ae:	7f ef       	ldi	r23, 0xFF	; 255
 9b0:	c5 01       	movw	r24, r10
 9b2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <strnlen_P>
 9b6:	4c 01       	movw	r8, r24
 9b8:	f3 2d       	mov	r31, r3
 9ba:	f0 68       	ori	r31, 0x80	; 128
 9bc:	3f 2e       	mov	r3, r31
 9be:	82 01       	movw	r16, r4
 9c0:	33 fc       	sbrc	r3, 3
 9c2:	1b c0       	rjmp	.+54     	; 0x9fa <__stack+0xfb>
 9c4:	82 2d       	mov	r24, r2
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	88 16       	cp	r8, r24
 9ca:	99 06       	cpc	r9, r25
 9cc:	b0 f4       	brcc	.+44     	; 0x9fa <__stack+0xfb>
 9ce:	b6 01       	movw	r22, r12
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 9d8:	2a 94       	dec	r2
 9da:	f4 cf       	rjmp	.-24     	; 0x9c4 <__stack+0xc5>
 9dc:	f5 01       	movw	r30, r10
 9de:	37 fc       	sbrc	r3, 7
 9e0:	85 91       	lpm	r24, Z+
 9e2:	37 fe       	sbrs	r3, 7
 9e4:	81 91       	ld	r24, Z+
 9e6:	5f 01       	movw	r10, r30
 9e8:	b6 01       	movw	r22, r12
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 9f0:	21 10       	cpse	r2, r1
 9f2:	2a 94       	dec	r2
 9f4:	21 e0       	ldi	r18, 0x01	; 1
 9f6:	82 1a       	sub	r8, r18
 9f8:	91 08       	sbc	r9, r1
 9fa:	81 14       	cp	r8, r1
 9fc:	91 04       	cpc	r9, r1
 9fe:	71 f7       	brne	.-36     	; 0x9dc <__stack+0xdd>
 a00:	e8 c0       	rjmp	.+464    	; 0xbd2 <__stack+0x2d3>
 a02:	84 36       	cpi	r24, 0x64	; 100
 a04:	11 f0       	breq	.+4      	; 0xa0a <__stack+0x10b>
 a06:	89 36       	cpi	r24, 0x69	; 105
 a08:	41 f5       	brne	.+80     	; 0xa5a <__stack+0x15b>
 a0a:	f8 01       	movw	r30, r16
 a0c:	37 fe       	sbrs	r3, 7
 a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__stack+0x11f>
 a10:	60 81       	ld	r22, Z
 a12:	71 81       	ldd	r23, Z+1	; 0x01
 a14:	82 81       	ldd	r24, Z+2	; 0x02
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	0c 5f       	subi	r16, 0xFC	; 252
 a1a:	1f 4f       	sbci	r17, 0xFF	; 255
 a1c:	08 c0       	rjmp	.+16     	; 0xa2e <__stack+0x12f>
 a1e:	60 81       	ld	r22, Z
 a20:	71 81       	ldd	r23, Z+1	; 0x01
 a22:	07 2e       	mov	r0, r23
 a24:	00 0c       	add	r0, r0
 a26:	88 0b       	sbc	r24, r24
 a28:	99 0b       	sbc	r25, r25
 a2a:	0e 5f       	subi	r16, 0xFE	; 254
 a2c:	1f 4f       	sbci	r17, 0xFF	; 255
 a2e:	f3 2d       	mov	r31, r3
 a30:	ff 76       	andi	r31, 0x6F	; 111
 a32:	3f 2e       	mov	r3, r31
 a34:	97 ff       	sbrs	r25, 7
 a36:	09 c0       	rjmp	.+18     	; 0xa4a <__stack+0x14b>
 a38:	90 95       	com	r25
 a3a:	80 95       	com	r24
 a3c:	70 95       	com	r23
 a3e:	61 95       	neg	r22
 a40:	7f 4f       	sbci	r23, 0xFF	; 255
 a42:	8f 4f       	sbci	r24, 0xFF	; 255
 a44:	9f 4f       	sbci	r25, 0xFF	; 255
 a46:	f0 68       	ori	r31, 0x80	; 128
 a48:	3f 2e       	mov	r3, r31
 a4a:	2a e0       	ldi	r18, 0x0A	; 10
 a4c:	30 e0       	ldi	r19, 0x00	; 0
 a4e:	a3 01       	movw	r20, r6
 a50:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ultoa_invert>
 a54:	88 2e       	mov	r8, r24
 a56:	86 18       	sub	r8, r6
 a58:	45 c0       	rjmp	.+138    	; 0xae4 <__stack+0x1e5>
 a5a:	85 37       	cpi	r24, 0x75	; 117
 a5c:	31 f4       	brne	.+12     	; 0xa6a <__stack+0x16b>
 a5e:	23 2d       	mov	r18, r3
 a60:	2f 7e       	andi	r18, 0xEF	; 239
 a62:	b2 2e       	mov	r11, r18
 a64:	2a e0       	ldi	r18, 0x0A	; 10
 a66:	30 e0       	ldi	r19, 0x00	; 0
 a68:	25 c0       	rjmp	.+74     	; 0xab4 <__stack+0x1b5>
 a6a:	93 2d       	mov	r25, r3
 a6c:	99 7f       	andi	r25, 0xF9	; 249
 a6e:	b9 2e       	mov	r11, r25
 a70:	8f 36       	cpi	r24, 0x6F	; 111
 a72:	c1 f0       	breq	.+48     	; 0xaa4 <__stack+0x1a5>
 a74:	18 f4       	brcc	.+6      	; 0xa7c <__stack+0x17d>
 a76:	88 35       	cpi	r24, 0x58	; 88
 a78:	79 f0       	breq	.+30     	; 0xa98 <__stack+0x199>
 a7a:	b5 c0       	rjmp	.+362    	; 0xbe6 <__stack+0x2e7>
 a7c:	80 37       	cpi	r24, 0x70	; 112
 a7e:	19 f0       	breq	.+6      	; 0xa86 <__stack+0x187>
 a80:	88 37       	cpi	r24, 0x78	; 120
 a82:	21 f0       	breq	.+8      	; 0xa8c <__stack+0x18d>
 a84:	b0 c0       	rjmp	.+352    	; 0xbe6 <__stack+0x2e7>
 a86:	e9 2f       	mov	r30, r25
 a88:	e0 61       	ori	r30, 0x10	; 16
 a8a:	be 2e       	mov	r11, r30
 a8c:	b4 fe       	sbrs	r11, 4
 a8e:	0d c0       	rjmp	.+26     	; 0xaaa <__stack+0x1ab>
 a90:	fb 2d       	mov	r31, r11
 a92:	f4 60       	ori	r31, 0x04	; 4
 a94:	bf 2e       	mov	r11, r31
 a96:	09 c0       	rjmp	.+18     	; 0xaaa <__stack+0x1ab>
 a98:	34 fe       	sbrs	r3, 4
 a9a:	0a c0       	rjmp	.+20     	; 0xab0 <__stack+0x1b1>
 a9c:	29 2f       	mov	r18, r25
 a9e:	26 60       	ori	r18, 0x06	; 6
 aa0:	b2 2e       	mov	r11, r18
 aa2:	06 c0       	rjmp	.+12     	; 0xab0 <__stack+0x1b1>
 aa4:	28 e0       	ldi	r18, 0x08	; 8
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__stack+0x1b5>
 aaa:	20 e1       	ldi	r18, 0x10	; 16
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	02 c0       	rjmp	.+4      	; 0xab4 <__stack+0x1b5>
 ab0:	20 e1       	ldi	r18, 0x10	; 16
 ab2:	32 e0       	ldi	r19, 0x02	; 2
 ab4:	f8 01       	movw	r30, r16
 ab6:	b7 fe       	sbrs	r11, 7
 ab8:	07 c0       	rjmp	.+14     	; 0xac8 <__stack+0x1c9>
 aba:	60 81       	ld	r22, Z
 abc:	71 81       	ldd	r23, Z+1	; 0x01
 abe:	82 81       	ldd	r24, Z+2	; 0x02
 ac0:	93 81       	ldd	r25, Z+3	; 0x03
 ac2:	0c 5f       	subi	r16, 0xFC	; 252
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	06 c0       	rjmp	.+12     	; 0xad4 <__stack+0x1d5>
 ac8:	60 81       	ld	r22, Z
 aca:	71 81       	ldd	r23, Z+1	; 0x01
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	0e 5f       	subi	r16, 0xFE	; 254
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	a3 01       	movw	r20, r6
 ad6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <__ultoa_invert>
 ada:	88 2e       	mov	r8, r24
 adc:	86 18       	sub	r8, r6
 ade:	fb 2d       	mov	r31, r11
 ae0:	ff 77       	andi	r31, 0x7F	; 127
 ae2:	3f 2e       	mov	r3, r31
 ae4:	36 fe       	sbrs	r3, 6
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__stack+0x203>
 ae8:	23 2d       	mov	r18, r3
 aea:	2e 7f       	andi	r18, 0xFE	; 254
 aec:	a2 2e       	mov	r10, r18
 aee:	89 14       	cp	r8, r9
 af0:	58 f4       	brcc	.+22     	; 0xb08 <__stack+0x209>
 af2:	34 fe       	sbrs	r3, 4
 af4:	0b c0       	rjmp	.+22     	; 0xb0c <__stack+0x20d>
 af6:	32 fc       	sbrc	r3, 2
 af8:	09 c0       	rjmp	.+18     	; 0xb0c <__stack+0x20d>
 afa:	83 2d       	mov	r24, r3
 afc:	8e 7e       	andi	r24, 0xEE	; 238
 afe:	a8 2e       	mov	r10, r24
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__stack+0x20d>
 b02:	b8 2c       	mov	r11, r8
 b04:	a3 2c       	mov	r10, r3
 b06:	03 c0       	rjmp	.+6      	; 0xb0e <__stack+0x20f>
 b08:	b8 2c       	mov	r11, r8
 b0a:	01 c0       	rjmp	.+2      	; 0xb0e <__stack+0x20f>
 b0c:	b9 2c       	mov	r11, r9
 b0e:	a4 fe       	sbrs	r10, 4
 b10:	0f c0       	rjmp	.+30     	; 0xb30 <__stack+0x231>
 b12:	fe 01       	movw	r30, r28
 b14:	e8 0d       	add	r30, r8
 b16:	f1 1d       	adc	r31, r1
 b18:	80 81       	ld	r24, Z
 b1a:	80 33       	cpi	r24, 0x30	; 48
 b1c:	21 f4       	brne	.+8      	; 0xb26 <__stack+0x227>
 b1e:	9a 2d       	mov	r25, r10
 b20:	99 7e       	andi	r25, 0xE9	; 233
 b22:	a9 2e       	mov	r10, r25
 b24:	09 c0       	rjmp	.+18     	; 0xb38 <__stack+0x239>
 b26:	a2 fe       	sbrs	r10, 2
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <__stack+0x237>
 b2a:	b3 94       	inc	r11
 b2c:	b3 94       	inc	r11
 b2e:	04 c0       	rjmp	.+8      	; 0xb38 <__stack+0x239>
 b30:	8a 2d       	mov	r24, r10
 b32:	86 78       	andi	r24, 0x86	; 134
 b34:	09 f0       	breq	.+2      	; 0xb38 <__stack+0x239>
 b36:	b3 94       	inc	r11
 b38:	a3 fc       	sbrc	r10, 3
 b3a:	11 c0       	rjmp	.+34     	; 0xb5e <__stack+0x25f>
 b3c:	a0 fe       	sbrs	r10, 0
 b3e:	06 c0       	rjmp	.+12     	; 0xb4c <__stack+0x24d>
 b40:	b2 14       	cp	r11, r2
 b42:	88 f4       	brcc	.+34     	; 0xb66 <__stack+0x267>
 b44:	28 0c       	add	r2, r8
 b46:	92 2c       	mov	r9, r2
 b48:	9b 18       	sub	r9, r11
 b4a:	0e c0       	rjmp	.+28     	; 0xb68 <__stack+0x269>
 b4c:	b2 14       	cp	r11, r2
 b4e:	60 f4       	brcc	.+24     	; 0xb68 <__stack+0x269>
 b50:	b6 01       	movw	r22, r12
 b52:	80 e2       	ldi	r24, 0x20	; 32
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b5a:	b3 94       	inc	r11
 b5c:	f7 cf       	rjmp	.-18     	; 0xb4c <__stack+0x24d>
 b5e:	b2 14       	cp	r11, r2
 b60:	18 f4       	brcc	.+6      	; 0xb68 <__stack+0x269>
 b62:	2b 18       	sub	r2, r11
 b64:	02 c0       	rjmp	.+4      	; 0xb6a <__stack+0x26b>
 b66:	98 2c       	mov	r9, r8
 b68:	21 2c       	mov	r2, r1
 b6a:	a4 fe       	sbrs	r10, 4
 b6c:	10 c0       	rjmp	.+32     	; 0xb8e <__stack+0x28f>
 b6e:	b6 01       	movw	r22, r12
 b70:	80 e3       	ldi	r24, 0x30	; 48
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 b78:	a2 fe       	sbrs	r10, 2
 b7a:	17 c0       	rjmp	.+46     	; 0xbaa <__stack+0x2ab>
 b7c:	a1 fc       	sbrc	r10, 1
 b7e:	03 c0       	rjmp	.+6      	; 0xb86 <__stack+0x287>
 b80:	88 e7       	ldi	r24, 0x78	; 120
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	02 c0       	rjmp	.+4      	; 0xb8a <__stack+0x28b>
 b86:	88 e5       	ldi	r24, 0x58	; 88
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	b6 01       	movw	r22, r12
 b8c:	0c c0       	rjmp	.+24     	; 0xba6 <__stack+0x2a7>
 b8e:	8a 2d       	mov	r24, r10
 b90:	86 78       	andi	r24, 0x86	; 134
 b92:	59 f0       	breq	.+22     	; 0xbaa <__stack+0x2ab>
 b94:	a1 fe       	sbrs	r10, 1
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <__stack+0x29d>
 b98:	8b e2       	ldi	r24, 0x2B	; 43
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <__stack+0x29f>
 b9c:	80 e2       	ldi	r24, 0x20	; 32
 b9e:	a7 fc       	sbrc	r10, 7
 ba0:	8d e2       	ldi	r24, 0x2D	; 45
 ba2:	b6 01       	movw	r22, r12
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 baa:	89 14       	cp	r8, r9
 bac:	38 f4       	brcc	.+14     	; 0xbbc <__stack+0x2bd>
 bae:	b6 01       	movw	r22, r12
 bb0:	80 e3       	ldi	r24, 0x30	; 48
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 bb8:	9a 94       	dec	r9
 bba:	f7 cf       	rjmp	.-18     	; 0xbaa <__stack+0x2ab>
 bbc:	8a 94       	dec	r8
 bbe:	f3 01       	movw	r30, r6
 bc0:	e8 0d       	add	r30, r8
 bc2:	f1 1d       	adc	r31, r1
 bc4:	80 81       	ld	r24, Z
 bc6:	b6 01       	movw	r22, r12
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 bce:	81 10       	cpse	r8, r1
 bd0:	f5 cf       	rjmp	.-22     	; 0xbbc <__stack+0x2bd>
 bd2:	22 20       	and	r2, r2
 bd4:	09 f4       	brne	.+2      	; 0xbd8 <__stack+0x2d9>
 bd6:	42 ce       	rjmp	.-892    	; 0x85c <vfprintf+0x24>
 bd8:	b6 01       	movw	r22, r12
 bda:	80 e2       	ldi	r24, 0x20	; 32
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	0e 94 13 06 	call	0xc26	; 0xc26 <fputc>
 be2:	2a 94       	dec	r2
 be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <__stack+0x2d3>
 be6:	f6 01       	movw	r30, r12
 be8:	86 81       	ldd	r24, Z+6	; 0x06
 bea:	97 81       	ldd	r25, Z+7	; 0x07
 bec:	02 c0       	rjmp	.+4      	; 0xbf2 <__stack+0x2f3>
 bee:	8f ef       	ldi	r24, 0xFF	; 255
 bf0:	9f ef       	ldi	r25, 0xFF	; 255
 bf2:	2b 96       	adiw	r28, 0x0b	; 11
 bf4:	e2 e1       	ldi	r30, 0x12	; 18
 bf6:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__epilogue_restores__>

00000bfa <strnlen_P>:
 bfa:	fc 01       	movw	r30, r24
 bfc:	05 90       	lpm	r0, Z+
 bfe:	61 50       	subi	r22, 0x01	; 1
 c00:	70 40       	sbci	r23, 0x00	; 0
 c02:	01 10       	cpse	r0, r1
 c04:	d8 f7       	brcc	.-10     	; 0xbfc <strnlen_P+0x2>
 c06:	80 95       	com	r24
 c08:	90 95       	com	r25
 c0a:	8e 0f       	add	r24, r30
 c0c:	9f 1f       	adc	r25, r31
 c0e:	08 95       	ret

00000c10 <strnlen>:
 c10:	fc 01       	movw	r30, r24
 c12:	61 50       	subi	r22, 0x01	; 1
 c14:	70 40       	sbci	r23, 0x00	; 0
 c16:	01 90       	ld	r0, Z+
 c18:	01 10       	cpse	r0, r1
 c1a:	d8 f7       	brcc	.-10     	; 0xc12 <strnlen+0x2>
 c1c:	80 95       	com	r24
 c1e:	90 95       	com	r25
 c20:	8e 0f       	add	r24, r30
 c22:	9f 1f       	adc	r25, r31
 c24:	08 95       	ret

00000c26 <fputc>:
 c26:	0f 93       	push	r16
 c28:	1f 93       	push	r17
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	fb 01       	movw	r30, r22
 c30:	23 81       	ldd	r18, Z+3	; 0x03
 c32:	21 fd       	sbrc	r18, 1
 c34:	03 c0       	rjmp	.+6      	; 0xc3c <fputc+0x16>
 c36:	8f ef       	ldi	r24, 0xFF	; 255
 c38:	9f ef       	ldi	r25, 0xFF	; 255
 c3a:	2c c0       	rjmp	.+88     	; 0xc94 <fputc+0x6e>
 c3c:	22 ff       	sbrs	r18, 2
 c3e:	16 c0       	rjmp	.+44     	; 0xc6c <fputc+0x46>
 c40:	46 81       	ldd	r20, Z+6	; 0x06
 c42:	57 81       	ldd	r21, Z+7	; 0x07
 c44:	24 81       	ldd	r18, Z+4	; 0x04
 c46:	35 81       	ldd	r19, Z+5	; 0x05
 c48:	42 17       	cp	r20, r18
 c4a:	53 07       	cpc	r21, r19
 c4c:	44 f4       	brge	.+16     	; 0xc5e <fputc+0x38>
 c4e:	a0 81       	ld	r26, Z
 c50:	b1 81       	ldd	r27, Z+1	; 0x01
 c52:	9d 01       	movw	r18, r26
 c54:	2f 5f       	subi	r18, 0xFF	; 255
 c56:	3f 4f       	sbci	r19, 0xFF	; 255
 c58:	31 83       	std	Z+1, r19	; 0x01
 c5a:	20 83       	st	Z, r18
 c5c:	8c 93       	st	X, r24
 c5e:	26 81       	ldd	r18, Z+6	; 0x06
 c60:	37 81       	ldd	r19, Z+7	; 0x07
 c62:	2f 5f       	subi	r18, 0xFF	; 255
 c64:	3f 4f       	sbci	r19, 0xFF	; 255
 c66:	37 83       	std	Z+7, r19	; 0x07
 c68:	26 83       	std	Z+6, r18	; 0x06
 c6a:	14 c0       	rjmp	.+40     	; 0xc94 <fputc+0x6e>
 c6c:	8b 01       	movw	r16, r22
 c6e:	ec 01       	movw	r28, r24
 c70:	fb 01       	movw	r30, r22
 c72:	00 84       	ldd	r0, Z+8	; 0x08
 c74:	f1 85       	ldd	r31, Z+9	; 0x09
 c76:	e0 2d       	mov	r30, r0
 c78:	09 95       	icall
 c7a:	89 2b       	or	r24, r25
 c7c:	e1 f6       	brne	.-72     	; 0xc36 <fputc+0x10>
 c7e:	d8 01       	movw	r26, r16
 c80:	16 96       	adiw	r26, 0x06	; 6
 c82:	8d 91       	ld	r24, X+
 c84:	9c 91       	ld	r25, X
 c86:	17 97       	sbiw	r26, 0x07	; 7
 c88:	01 96       	adiw	r24, 0x01	; 1
 c8a:	17 96       	adiw	r26, 0x07	; 7
 c8c:	9c 93       	st	X, r25
 c8e:	8e 93       	st	-X, r24
 c90:	16 97       	sbiw	r26, 0x06	; 6
 c92:	ce 01       	movw	r24, r28
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	1f 91       	pop	r17
 c9a:	0f 91       	pop	r16
 c9c:	08 95       	ret

00000c9e <__ultoa_invert>:
 c9e:	fa 01       	movw	r30, r20
 ca0:	aa 27       	eor	r26, r26
 ca2:	28 30       	cpi	r18, 0x08	; 8
 ca4:	51 f1       	breq	.+84     	; 0xcfa <__ultoa_invert+0x5c>
 ca6:	20 31       	cpi	r18, 0x10	; 16
 ca8:	81 f1       	breq	.+96     	; 0xd0a <__ultoa_invert+0x6c>
 caa:	e8 94       	clt
 cac:	6f 93       	push	r22
 cae:	6e 7f       	andi	r22, 0xFE	; 254
 cb0:	6e 5f       	subi	r22, 0xFE	; 254
 cb2:	7f 4f       	sbci	r23, 0xFF	; 255
 cb4:	8f 4f       	sbci	r24, 0xFF	; 255
 cb6:	9f 4f       	sbci	r25, 0xFF	; 255
 cb8:	af 4f       	sbci	r26, 0xFF	; 255
 cba:	b1 e0       	ldi	r27, 0x01	; 1
 cbc:	3e d0       	rcall	.+124    	; 0xd3a <__ultoa_invert+0x9c>
 cbe:	b4 e0       	ldi	r27, 0x04	; 4
 cc0:	3c d0       	rcall	.+120    	; 0xd3a <__ultoa_invert+0x9c>
 cc2:	67 0f       	add	r22, r23
 cc4:	78 1f       	adc	r23, r24
 cc6:	89 1f       	adc	r24, r25
 cc8:	9a 1f       	adc	r25, r26
 cca:	a1 1d       	adc	r26, r1
 ccc:	68 0f       	add	r22, r24
 cce:	79 1f       	adc	r23, r25
 cd0:	8a 1f       	adc	r24, r26
 cd2:	91 1d       	adc	r25, r1
 cd4:	a1 1d       	adc	r26, r1
 cd6:	6a 0f       	add	r22, r26
 cd8:	71 1d       	adc	r23, r1
 cda:	81 1d       	adc	r24, r1
 cdc:	91 1d       	adc	r25, r1
 cde:	a1 1d       	adc	r26, r1
 ce0:	20 d0       	rcall	.+64     	; 0xd22 <__ultoa_invert+0x84>
 ce2:	09 f4       	brne	.+2      	; 0xce6 <__ultoa_invert+0x48>
 ce4:	68 94       	set
 ce6:	3f 91       	pop	r19
 ce8:	2a e0       	ldi	r18, 0x0A	; 10
 cea:	26 9f       	mul	r18, r22
 cec:	11 24       	eor	r1, r1
 cee:	30 19       	sub	r19, r0
 cf0:	30 5d       	subi	r19, 0xD0	; 208
 cf2:	31 93       	st	Z+, r19
 cf4:	de f6       	brtc	.-74     	; 0xcac <__ultoa_invert+0xe>
 cf6:	cf 01       	movw	r24, r30
 cf8:	08 95       	ret
 cfa:	46 2f       	mov	r20, r22
 cfc:	47 70       	andi	r20, 0x07	; 7
 cfe:	40 5d       	subi	r20, 0xD0	; 208
 d00:	41 93       	st	Z+, r20
 d02:	b3 e0       	ldi	r27, 0x03	; 3
 d04:	0f d0       	rcall	.+30     	; 0xd24 <__ultoa_invert+0x86>
 d06:	c9 f7       	brne	.-14     	; 0xcfa <__ultoa_invert+0x5c>
 d08:	f6 cf       	rjmp	.-20     	; 0xcf6 <__ultoa_invert+0x58>
 d0a:	46 2f       	mov	r20, r22
 d0c:	4f 70       	andi	r20, 0x0F	; 15
 d0e:	40 5d       	subi	r20, 0xD0	; 208
 d10:	4a 33       	cpi	r20, 0x3A	; 58
 d12:	18 f0       	brcs	.+6      	; 0xd1a <__ultoa_invert+0x7c>
 d14:	49 5d       	subi	r20, 0xD9	; 217
 d16:	31 fd       	sbrc	r19, 1
 d18:	40 52       	subi	r20, 0x20	; 32
 d1a:	41 93       	st	Z+, r20
 d1c:	02 d0       	rcall	.+4      	; 0xd22 <__ultoa_invert+0x84>
 d1e:	a9 f7       	brne	.-22     	; 0xd0a <__ultoa_invert+0x6c>
 d20:	ea cf       	rjmp	.-44     	; 0xcf6 <__ultoa_invert+0x58>
 d22:	b4 e0       	ldi	r27, 0x04	; 4
 d24:	a6 95       	lsr	r26
 d26:	97 95       	ror	r25
 d28:	87 95       	ror	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	ba 95       	dec	r27
 d30:	c9 f7       	brne	.-14     	; 0xd24 <__ultoa_invert+0x86>
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	61 05       	cpc	r22, r1
 d36:	71 05       	cpc	r23, r1
 d38:	08 95       	ret
 d3a:	9b 01       	movw	r18, r22
 d3c:	ac 01       	movw	r20, r24
 d3e:	0a 2e       	mov	r0, r26
 d40:	06 94       	lsr	r0
 d42:	57 95       	ror	r21
 d44:	47 95       	ror	r20
 d46:	37 95       	ror	r19
 d48:	27 95       	ror	r18
 d4a:	ba 95       	dec	r27
 d4c:	c9 f7       	brne	.-14     	; 0xd40 <__ultoa_invert+0xa2>
 d4e:	62 0f       	add	r22, r18
 d50:	73 1f       	adc	r23, r19
 d52:	84 1f       	adc	r24, r20
 d54:	95 1f       	adc	r25, r21
 d56:	a0 1d       	adc	r26, r0
 d58:	08 95       	ret

00000d5a <__prologue_saves__>:
 d5a:	2f 92       	push	r2
 d5c:	3f 92       	push	r3
 d5e:	4f 92       	push	r4
 d60:	5f 92       	push	r5
 d62:	6f 92       	push	r6
 d64:	7f 92       	push	r7
 d66:	8f 92       	push	r8
 d68:	9f 92       	push	r9
 d6a:	af 92       	push	r10
 d6c:	bf 92       	push	r11
 d6e:	cf 92       	push	r12
 d70:	df 92       	push	r13
 d72:	ef 92       	push	r14
 d74:	ff 92       	push	r15
 d76:	0f 93       	push	r16
 d78:	1f 93       	push	r17
 d7a:	cf 93       	push	r28
 d7c:	df 93       	push	r29
 d7e:	cd b7       	in	r28, 0x3d	; 61
 d80:	de b7       	in	r29, 0x3e	; 62
 d82:	ca 1b       	sub	r28, r26
 d84:	db 0b       	sbc	r29, r27
 d86:	0f b6       	in	r0, 0x3f	; 63
 d88:	f8 94       	cli
 d8a:	de bf       	out	0x3e, r29	; 62
 d8c:	0f be       	out	0x3f, r0	; 63
 d8e:	cd bf       	out	0x3d, r28	; 61
 d90:	09 94       	ijmp

00000d92 <__epilogue_restores__>:
 d92:	2a 88       	ldd	r2, Y+18	; 0x12
 d94:	39 88       	ldd	r3, Y+17	; 0x11
 d96:	48 88       	ldd	r4, Y+16	; 0x10
 d98:	5f 84       	ldd	r5, Y+15	; 0x0f
 d9a:	6e 84       	ldd	r6, Y+14	; 0x0e
 d9c:	7d 84       	ldd	r7, Y+13	; 0x0d
 d9e:	8c 84       	ldd	r8, Y+12	; 0x0c
 da0:	9b 84       	ldd	r9, Y+11	; 0x0b
 da2:	aa 84       	ldd	r10, Y+10	; 0x0a
 da4:	b9 84       	ldd	r11, Y+9	; 0x09
 da6:	c8 84       	ldd	r12, Y+8	; 0x08
 da8:	df 80       	ldd	r13, Y+7	; 0x07
 daa:	ee 80       	ldd	r14, Y+6	; 0x06
 dac:	fd 80       	ldd	r15, Y+5	; 0x05
 dae:	0c 81       	ldd	r16, Y+4	; 0x04
 db0:	1b 81       	ldd	r17, Y+3	; 0x03
 db2:	aa 81       	ldd	r26, Y+2	; 0x02
 db4:	b9 81       	ldd	r27, Y+1	; 0x01
 db6:	ce 0f       	add	r28, r30
 db8:	d1 1d       	adc	r29, r1
 dba:	0f b6       	in	r0, 0x3f	; 63
 dbc:	f8 94       	cli
 dbe:	de bf       	out	0x3e, r29	; 62
 dc0:	0f be       	out	0x3f, r0	; 63
 dc2:	cd bf       	out	0x3d, r28	; 61
 dc4:	ed 01       	movw	r28, r26
 dc6:	08 95       	ret

00000dc8 <_exit>:
 dc8:	f8 94       	cli

00000dca <__stop_program>:
 dca:	ff cf       	rjmp	.-2      	; 0xdca <__stop_program>
